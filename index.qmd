---
title: "Advanced SQL Analytics for Pharma Sales Insights"
author: João Lucio de Azevedo Fenerich
format: 
  revealjs:
    slide-level: 1
    theme: default
    slide-number: c/t
    controls: true
    controlsTutorial: true
    controlsLayout: 'edges'
    controlsBackArrows: 'visible'
    showSlideNumber: 'all'
    fullscreen: true
---
## Project Setup

<div style="font-size:32px">

### Tools Used
![MicrosoftSQLServer](https://img.shields.io/badge/Microsoft%20SQL%20Server-CC2927.svg?style=for-the-badge&logo=Microsoft-SQL-Server&logoColor=white) ![Visual Studio Code](https://img.shields.io/badge/Visual%20Studio%20Code-007ACC.svg?style=for-the-badge&logo=Visual-Studio-Code&logoColor=white) ![DBeaver](https://img.shields.io/badge/DBeaver-382923.svg?style=for-the-badge&logo=DBeaver&logoColor=white)


### Installation and Configuration of SQL Server Locally

The first step was to install and configure SQL Server on my machine and connect it to DBeaver for data handling.

### CSV Import to SQL Server

The second step of this project involves the careful import of data from CSV files into temporary tables in SQL Server.

</div>

---
 
## Github repository schema
<a href="https://github.com/jlfenerich/Pharma-Commercial-Insights" style="margin-right: 10px;">
    <img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" alt="GitHub Logo" style="border-radius: 10px;">
</a>


<div style="font-size:27px">
```
├── README.md                                     <- Project documentation.
├── data
│   ├── BASE_OBJETIVOS.csv                        <- Raw data to be normalized.
│   └── BASE_VENDAS.csv                           <- Raw data to be normalized.
│
├── docs                                          <- Diagram in .png
│
├── sql_scripts
│   ├── normalization
│   │   ├── LOAD_OBJETIVO.sql                     <- Script to load normalized data into OBJETIVO table.
│   │   ├── LOAD_VENDA.sql                        <- Script to load normalized data into VENDA table.
│   │   ├── Normalizacao_CreateTempTABLES.sql     <- Script to create temporary table.
│   │   ├── Normalizacao_InsertCSVtoTempTABLE.sql <- Script to load CSV data into temporary table.
│   │   ├── Normalizacao_TempObjetivos-CD.sql     <- Script for normalization with related codes.
│   │   └── Normalizacao_TempVendas-CD.sql        <- Script for normalization with related codes.
│   ├── queries
│   │   └── 3_Perguntas.sql                       <- Questions to be answered using the data.
│   └── setup
│       ├── 0_CreateDatabase.sql                  <- Script to create the database.
│       ├── 1_CreateTable.sql                     <- Script to create relational tables.
│       └── 2_Insert.sql                          <- Data insertion.
```

</div>

---

## Data Normalization and Structuring

<div style="font-size:26px">

The normalization step follows, where imported data are restructured and optimized. Scripts for this phase are available in the `sql_script/normalization` folder.

</div>


![Database Schema Diagram](./assets/database-diagram.svg)

---

## Overview of Project Objectives

##### Detailed Analysis of Sales Performance Across Different Metrics
<div class="row" style="overflow:hidden;">
<div class="column" style="float:left;width:49%;font-size:32px; border-right:2px solid #ccc; padding-right:20px; box-sizing: border-box;">

- **Team and Product Analysis**
  - Return "Company name", "Team name", "User name", and "Quantity of Products"
  - **Filter**: Products > 10% weight
  - **Sort**: By Team and User

</div>
<div class="column" style="float:right;width:49%;font-size:32px; padding-left:20px; box-sizing: border-box;">

- **Best-Selling Products by Team**
  - Return "Team name", "Product name", and "Quantity of Products sold"
  - **Note**: Only for the top-sellers in each team

</div>
</div>

---

## Key Sales Insights

<div class="row" style="overflow:hidden;">
<div class="column" style="float:left;width:49%;font-size:32px; border-right:2px solid #ccc; padding-right:20px; box-sizing: border-box;">

##### Sales and Ranking in the First Semester

- **Objective**: Return detailed sales data and rankings for the first semester
  - **Data**: "Team name", "Product name", "User name", "Quantity of Products sold", and "Ranking"
  - **Period**: January to June

</div>
<div class="column" style="float:right;width:49%;font-size:32px; padding-left:20px; box-sizing: border-box;">

##### Objectives by Quarter

- **Objective**: Analyze performance across quarters
  - **Data**: "Team name", "User name", "Product name", "Quarter", and "average objectives per quarter"
  - **Sort**: By "Team name", "User name", "Product name", and "average objectives per quarter" (descending)

</div>
</div>

---

## Advanced SQL Query Example

##### Analyzing Sales Data

<div style="font-size:21px">


This SQL query demonstrates how to aggregate sales data by team, filtering by product weight and sorting by team and user metrics, showcasing advanced data manipulation for strategic insights.

</div>
<div style="font-size:25px">
```sql
SELECT 
    E.NM_EMPRESA AS 'Nome da Empresa',
    T.NM_EQUIPE AS 'Nome da Equipe',
    U.NM_USUARIO AS 'Nome do Usuário',
    COUNT(P.CD_PRODUTO) AS 'Qtd de Produtos'
FROM 
    USUARIO U
    JOIN EQUIPE_USUARIO EU ON U.CD_USUARIO = EU.CD_USUARIO
    JOIN EQUIPE T ON EU.CD_EQUIPE = T.CD_EQUIPE
    JOIN EMPRESA E ON T.CD_EMPRESA = E.CD_EMPRESA
    JOIN EQUIPE_PRODUTO EP ON T.CD_EQUIPE = EP.CD_EQUIPE
    JOIN PRODUTO P ON EP.CD_PRODUTO = P.CD_PRODUTO
WHERE 
    EP.NR_PESO > 0.10
GROUP BY 
    E.NM_EMPRESA, T.NM_EQUIPE, U.NM_USUARIO
ORDER BY 
    T.NM_EQUIPE, U.NM_USUARIO;
```
</div>

---

#### SQL Query Example: Top-Selling Products by Team
###### Objective
<div style="font-size:21px">

This query identifies the top-selling products for each team, highlighting the use of CTEs and aggregate functions to extract meaningful sales insights.

</div>
<div style="font-size:25px">

```sql
WITH VendasPorProduto AS (
    SELECT 
        EP.CD_EQUIPE,
        EP.CD_PRODUTO,
        SUM(V.NR_QUANTIDADE) AS QtdVendida
    FROM 
        VENDA V
        JOIN EQUIPE_PRODUTO EP ON V.CD_PRODUTO = EP.CD_PRODUTO
    GROUP BY 
        EP.CD_EQUIPE, EP.CD_PRODUTO
), MaxVendasPorEquipe AS (
    SELECT 
        CD_EQUIPE,
        MAX(QtdVendida) AS MaxVendas
    FROM 
        VendasPorProduto
    GROUP BY 
        CD_EQUIPE
), ProdutosMaisVendidosPorEquipe AS (
    SELECT 
        VP.CD_EQUIPE,
        VP.CD_PRODUTO,
        VP.QtdVendida
    FROM 
        VendasPorProduto VP
        INNER JOIN MaxVendasPorEquipe MV ON VP.CD_EQUIPE = MV.CD_EQUIPE AND VP.QtdVendida = MV.MaxVendas
)
SELECT 
    E.Nm_EQUIPE AS 'Nome da Equipe',
    P.Nm_PRODUTO AS 'Nome do Produto',
    PMV.QtdVendida AS 'Qtd de Produtos Vendidos'
FROM 
    ProdutosMaisVendidosPorEquipe PMV
    JOIN EQUIPE E ON PMV.CD_EQUIPE = E.CD_EQUIPE
    JOIN PRODUTO P ON PMV.CD_PRODUTO = P.CD_PRODUTO
ORDER BY 
    E.Nm_EQUIPE, PMV.QtdVendida DESC;
```
</div>
---

<div style="justify-content: center; align-items: center; height: 100%;">

## Connect with Me

**Name**: João Fenerich

[![](https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white)](https://github.com/jlfenerich) 
[![](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://linkedin.com/in/jlafenerich)

</div>
</div>